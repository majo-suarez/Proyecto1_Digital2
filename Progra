#include <Arduino.h>
#include <driver/ledc.h>
#include <display7.h>

#define pA 32
#define pB 33
#define pC 25
#define pD 26
#define pE 27
#define pF 14
#define pG 12
#define pdP 13

#define dis1 4
#define dis2 0
#define dis3 2

#define ADC_VREF_mV 3500.0    // minivolts
#define ADC_RESOLUTION 4096.0 // Resolución del ADC
#define pinsensor 36          // ESP32 pin GPIO36 (ADC0) conectado a LM35
#define botpin 18             // Pin de botón

#define ledv 23 // Led verde
#define leda 22 // Led amarilla
#define ledr 1  // Led roja
#define servo 19

#define ledvChannel 1
#define ledaChannel 2
#define ledrChannel 3
#define servoChannel 4
#define freqPWM1 1000
#define freqPWM2 1000
#define freqPWM3 1000

#define resolution 8

void configurarPWM();
void moverServo(int angulo);
void mostrarTemperaturaEnDisplay(float tempC);

bool banderabot = false;

void setup()
{
  configurarDisplay7(pA, pB, pC, pD, pE, pF, pG, pdP);

  pinMode(dis1, OUTPUT);
  pinMode(dis2, OUTPUT);
  pinMode(dis3, OUTPUT);

  digitalWrite(dis1, HIGH);
  digitalWrite(dis2, HIGH);
  digitalWrite(dis3, HIGH);

  pinMode(botpin, INPUT_PULLUP);
  pinMode(ledv, OUTPUT);
  pinMode(leda, OUTPUT);
  pinMode(ledr, OUTPUT);

  // Apagar todos los LEDs al principio
  ledcWrite(ledvChannel, 0);
  ledcWrite(ledaChannel, 0);
  ledcWrite(ledrChannel, 0);

  configurarPWM();

  Serial.begin(9600);
}

void loop()
{
  int leerbot = digitalRead(botpin);

  if (leerbot == LOW && !banderabot)
  {
    banderabot = true;

    // Leer valor ADC del sensor de temperatura
    int adcVal = analogRead(pinsensor);
    // Convertir ADC a voltaje minivolts
    float milliVolt = adcVal * (ADC_VREF_mV / ADC_RESOLUTION);
    // Convertir voltaje a temperatura en °C
    float tempC = milliVolt / 10;

    // Control de LEDs en función de la temperatura
    if (tempC < 37.0)
    {
      ledcWrite(ledvChannel, 255);
      ledcWrite(ledaChannel, 0);
      ledcWrite(ledrChannel, 0);
      moverServo(0); // Mover el servo a 0 grados
      Serial.println("Caso 37");
    }
    else if (tempC < 37.5)
    {
      ledcWrite(ledvChannel, 0);
      ledcWrite(ledaChannel, 255);
      ledcWrite(ledrChannel, 0);
      moverServo(90); // Mover el servo a 90 grados
      Serial.println("Caso 37.5");
    }
    else if (tempC >= 37.5)
    {
      ledcWrite(ledvChannel, 0);
      ledcWrite(ledaChannel, 0);
      ledcWrite(ledrChannel, 255);
      moverServo(180); // Mover el servo a 180 grados
      Serial.println("Caso 38");
    }

    // Imprimir en monitor serial
    Serial.print("Temperature: ");
    Serial.print(tempC); // Imprime temperatura en °C
    Serial.println("°C");

    // Mostrar la temperatura en los displays de 7 segmentos
    mostrarTemperaturaEnDisplay(tempC);
  }

  if (leerbot == HIGH)
  {
    banderabot = false;
  }
}

void configurarPWM()
{
  ledcSetup(ledvChannel, freqPWM1, resolution);
  ledcSetup(ledaChannel, freqPWM2, resolution);
  ledcSetup(ledrChannel, freqPWM3, resolution);
  ledcSetup(servoChannel, 500, 8);

  ledcAttachPin(ledv, ledvChannel);
  ledcAttachPin(leda, ledaChannel);
  ledcAttachPin(ledr, ledrChannel);
  ledcAttachPin(servo, servoChannel);
}

void moverServo(int angulo)
{
  int dutyCycle = map(angulo, 0, 180, 40, 115); // Mapear ángulo a ciclo de trabajo
  ledcWrite(servoChannel, dutyCycle);
}

void mostrarTemperaturaEnDisplay(float tempC)
{
  // Convertir temperatura a un valor entero para mostrar en los displays
  int temperaturaEntera = int(tempC);

  // Mostrar la temperatura en los tres displays
  digitalWrite(dis1, HIGH);
  digitalWrite(dis2, LOW);
  digitalWrite(dis2, LOW);
  desplegarValor(temperaturaEntera % 10); // Unidades
  delay(5);

  digitalWrite(dis1, LOW);
  digitalWrite(dis2, HIGH);
  digitalWrite(dis3, LOW);
  desplegarValor((temperaturaEntera / 10) % 10); // Decenas
  desplegarPunto(true);
  delay(5);

  digitalWrite(dis1, LOW);
  digitalWrite(dis2, LOW);
  digitalWrite(dis3, HIGH);
  desplegarValor((temperaturaEntera / 100) % 10); // Centenas
  desplegarPunto(false);
  delay(5);
}
